/*
Copyright 2018 Infoblox, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/infobloxopen/atlas/pkg/apis/atlasdb/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabaseServerLister helps list DatabaseServers.
type DatabaseServerLister interface {
	// List lists all DatabaseServers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseServer, err error)
	// DatabaseServers returns an object that can list and get DatabaseServers.
	DatabaseServers(namespace string) DatabaseServerNamespaceLister
	DatabaseServerListerExpansion
}

// databaseServerLister implements the DatabaseServerLister interface.
type databaseServerLister struct {
	indexer cache.Indexer
}

// NewDatabaseServerLister returns a new DatabaseServerLister.
func NewDatabaseServerLister(indexer cache.Indexer) DatabaseServerLister {
	return &databaseServerLister{indexer: indexer}
}

// List lists all DatabaseServers in the indexer.
func (s *databaseServerLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseServer))
	})
	return ret, err
}

// DatabaseServers returns an object that can list and get DatabaseServers.
func (s *databaseServerLister) DatabaseServers(namespace string) DatabaseServerNamespaceLister {
	return databaseServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseServerNamespaceLister helps list and get DatabaseServers.
type DatabaseServerNamespaceLister interface {
	// List lists all DatabaseServers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseServer, err error)
	// Get retrieves the DatabaseServer from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DatabaseServer, error)
	DatabaseServerNamespaceListerExpansion
}

// databaseServerNamespaceLister implements the DatabaseServerNamespaceLister
// interface.
type databaseServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabaseServers in the indexer for a given namespace.
func (s databaseServerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseServer))
	})
	return ret, err
}

// Get retrieves the DatabaseServer from the indexer for a given namespace and name.
func (s databaseServerNamespaceLister) Get(name string) (*v1alpha1.DatabaseServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databaseserver"), name)
	}
	return obj.(*v1alpha1.DatabaseServer), nil
}
