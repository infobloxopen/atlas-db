/*
Copyright 2018 Infoblox, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/infobloxopen/atlas-db/pkg/apis/db/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabaseSchemaLister helps list DatabaseSchemas.
type DatabaseSchemaLister interface {
	// List lists all DatabaseSchemas in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseSchema, err error)
	// DatabaseSchemas returns an object that can list and get DatabaseSchemas.
	DatabaseSchemas(namespace string) DatabaseSchemaNamespaceLister
	DatabaseSchemaListerExpansion
}

// databaseSchemaLister implements the DatabaseSchemaLister interface.
type databaseSchemaLister struct {
	indexer cache.Indexer
}

// NewDatabaseSchemaLister returns a new DatabaseSchemaLister.
func NewDatabaseSchemaLister(indexer cache.Indexer) DatabaseSchemaLister {
	return &databaseSchemaLister{indexer: indexer}
}

// List lists all DatabaseSchemas in the indexer.
func (s *databaseSchemaLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseSchema, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseSchema))
	})
	return ret, err
}

// DatabaseSchemas returns an object that can list and get DatabaseSchemas.
func (s *databaseSchemaLister) DatabaseSchemas(namespace string) DatabaseSchemaNamespaceLister {
	return databaseSchemaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseSchemaNamespaceLister helps list and get DatabaseSchemas.
type DatabaseSchemaNamespaceLister interface {
	// List lists all DatabaseSchemas in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseSchema, err error)
	// Get retrieves the DatabaseSchema from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DatabaseSchema, error)
	DatabaseSchemaNamespaceListerExpansion
}

// databaseSchemaNamespaceLister implements the DatabaseSchemaNamespaceLister
// interface.
type databaseSchemaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabaseSchemas in the indexer for a given namespace.
func (s databaseSchemaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseSchema, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseSchema))
	})
	return ret, err
}

// Get retrieves the DatabaseSchema from the indexer for a given namespace and name.
func (s databaseSchemaNamespaceLister) Get(name string) (*v1alpha1.DatabaseSchema, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databaseschema"), name)
	}
	return obj.(*v1alpha1.DatabaseSchema), nil
}
