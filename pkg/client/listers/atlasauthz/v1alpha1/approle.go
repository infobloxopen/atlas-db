/*
Copyright 2018 Infoblox, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/infobloxopen/atlas/pkg/apis/atlasauthz/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppRoleLister helps list AppRoles.
type AppRoleLister interface {
	// List lists all AppRoles in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AppRole, err error)
	// AppRoles returns an object that can list and get AppRoles.
	AppRoles(namespace string) AppRoleNamespaceLister
	AppRoleListerExpansion
}

// appRoleLister implements the AppRoleLister interface.
type appRoleLister struct {
	indexer cache.Indexer
}

// NewAppRoleLister returns a new AppRoleLister.
func NewAppRoleLister(indexer cache.Indexer) AppRoleLister {
	return &appRoleLister{indexer: indexer}
}

// List lists all AppRoles in the indexer.
func (s *appRoleLister) List(selector labels.Selector) (ret []*v1alpha1.AppRole, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppRole))
	})
	return ret, err
}

// AppRoles returns an object that can list and get AppRoles.
func (s *appRoleLister) AppRoles(namespace string) AppRoleNamespaceLister {
	return appRoleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppRoleNamespaceLister helps list and get AppRoles.
type AppRoleNamespaceLister interface {
	// List lists all AppRoles in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AppRole, err error)
	// Get retrieves the AppRole from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AppRole, error)
	AppRoleNamespaceListerExpansion
}

// appRoleNamespaceLister implements the AppRoleNamespaceLister
// interface.
type appRoleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppRoles in the indexer for a given namespace.
func (s appRoleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppRole, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppRole))
	})
	return ret, err
}

// Get retrieves the AppRole from the indexer for a given namespace and name.
func (s appRoleNamespaceLister) Get(name string) (*v1alpha1.AppRole, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("approle"), name)
	}
	return obj.(*v1alpha1.AppRole), nil
}
